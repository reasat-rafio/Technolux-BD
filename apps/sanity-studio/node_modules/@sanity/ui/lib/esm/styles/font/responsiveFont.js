import { getResponsiveProp, rem, responsive } from "../helpers";
function responsiveFont(fontKey, props) {
  const { $size, $weight, theme } = props;
  const { fonts, media } = theme.sanity;
  const { family, sizes, weights, horizontalOffset } = fonts[fontKey];
  const fontWeight = $weight && weights[$weight] || weights.regular;
  const defaultSize = sizes[2];
  const base = {
    position: "relative",
    fontFamily: family,
    fontWeight,
    padding: "1px",
    margin: 0,
    "&:before": {
      content: '""',
      display: "block",
      height: 0
    },
    "&:after": {
      content: '""',
      display: "block",
      height: 0
    },
    "& > code, & > span": {
      display: "block"
    },
    "&:not([hidden])": {
      display: "block"
    }
  };
  const resp = responsive(media, getResponsiveProp($size), (sizeIndex) => fontSize(sizes[sizeIndex] || defaultSize, horizontalOffset));
  return [base, ...resp];
}
function fontSize(size, horizontalOffset) {
  const { ascenderHeight, descenderHeight, fontSize: fontSize2, iconSize, letterSpacing, lineHeight } = size;
  const negHeight = ascenderHeight + descenderHeight;
  const capHeight = lineHeight - negHeight;
  const iconOffset = (capHeight - iconSize) / 2;
  return {
    fontSize: rem(fontSize2),
    lineHeight: `calc(${lineHeight} / ${fontSize2})`,
    letterSpacing: rem(letterSpacing),
    transform: `translateY(${rem(descenderHeight)})`,
    "&:before": {
      marginTop: `calc(${rem(0 - negHeight)} - 1px)`
    },
    "&:after": {
      marginBottom: "-1px"
    },
    "& > code, & > span": {
      margin: horizontalOffset ? `0 calc(${rem(0 - horizontalOffset * fontSize2)} - 1px)` : "0 -1px"
    },
    "& [data-sanity-icon]": {
      fontSize: `calc(${iconSize} / 16 * 1rem)`,
      margin: [
        rem(iconOffset),
        horizontalOffset ? `calc(${rem(iconOffset)} + ${rem(horizontalOffset * fontSize2)})` : rem(iconOffset)
      ].join(" ")
    }
  };
}
export {
  fontSize,
  responsiveFont
};
