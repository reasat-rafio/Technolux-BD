{"version":3,"file":"asset-utils.esm.js","sources":["../src/hotspotCrop.ts","../src/utils.ts","../src/constants.ts","../src/asserters.ts","../src/paths.ts","../src/parse.ts","../src/resolve.ts","../src/urls.ts"],"sourcesContent":["import type {SanityImageCrop, SanityImageHotspot} from './types'\n\n/**\n * Default crop (equals to \"whole image\")\n */\nexport const DEFAULT_CROP: Readonly<SanityImageCrop> = Object.freeze({\n  left: 0,\n  top: 0,\n  bottom: 0,\n  right: 0,\n})\n\n/**\n * Default hotspot (equals to horizontal/vertical center, full size of image)\n */\nexport const DEFAULT_HOTSPOT: Readonly<SanityImageHotspot> = Object.freeze({\n  x: 0.5,\n  y: 0.5,\n  height: 1,\n  width: 1,\n})\n\n/**\n * Returns cloned version of the default crop (prevents accidental mutations)\n *\n * @returns Default image crop object\n */\nexport const getDefaultCrop = (): SanityImageCrop => ({...DEFAULT_CROP})\n\n/**\n * Returns cloned version of the default hotspot (prevents accidental mutations)\n *\n * @returns Default image hotspot object\n */\nexport const getDefaultHotspot = (): SanityImageHotspot => ({...DEFAULT_HOTSPOT})\n\n/**\n * Returns whether or not the passed crop has the default values for a crop region\n *\n * @param crop The crop to return whether or not is the default crop\n * @returns True if passed crop matches default, false otherwise\n */\nexport const isDefaultCrop = (crop: SanityImageCrop): boolean => {\n  const {top, bottom, left, right} = crop\n  const {\n    top: defaultTop,\n    bottom: defaultBottom,\n    left: defaultLeft,\n    right: defaultRight,\n  } = DEFAULT_CROP\n\n  return (\n    top === defaultTop && bottom === defaultBottom && left === defaultLeft && right === defaultRight\n  )\n}\n\n/**\n * Returns whether or not the passed hotspot has the default values for a hotspot region\n *\n * @param hotspot The hotspot to return whether or not is the default hotspot\n * @returns True if passed hotspot matches default, false otherwise\n */\nexport const isDefaultHotspot = (hotspot: SanityImageHotspot): boolean => {\n  const {x, y, width, height} = hotspot\n  const {x: defaultX, y: defaultY, width: defaultWidth, height: defaultHeight} = DEFAULT_HOTSPOT\n\n  return x === defaultX && y === defaultY && width === defaultWidth && height === defaultHeight\n}\n","/**\n * @internal\n */\nexport type MethodReturnType<T> = T extends (...args: unknown[]) => infer R ? R : any // eslint-disable-line @typescript-eslint/no-explicit-any\n\n/**\n * @internal\n */\nexport type ArgumentTypes<F extends Function> = F extends (...args: infer A) => unknown ? A : never\n\n/**\n * Error type thrown when the library fails to resolve a value, such as an asset ID,\n * filename or project ID/dataset information.\n *\n * The `input` property holds the value passed as the input, which failed to be\n * resolved to something meaningful.\n */\nexport class UnresolvableError extends Error {\n  unresolvable = true\n\n  // The input may not be a valid source, so let's not type it as one\n  input?: unknown\n\n  constructor(inputSource: unknown, message = 'Failed to resolve asset ID from source') {\n    super(message)\n    this.input = inputSource\n  }\n}\n\n/**\n * Checks whether or not an error instance is of type UnresolvableError\n *\n * @param err - Error to check for unresolvable error type\n * @returns True if the passed error instance appears to be an unresolveable error\n */\nexport function isUnresolvableError(err: Error): err is UnresolvableError {\n  const error = err as UnresolvableError\n  return Boolean(error.unresolvable && 'input' in error)\n}\n\n/**\n * Returns a getter which returns `undefined` instead of throwing,\n * if encountering an `UnresolvableError`\n *\n * @param method - Function to use as resolver\n * @returns Function that returns `undefined` if passed resolver throws UnresolvableError\n * @internal\n */\nexport function getForgivingResolver<T extends Function>(method: T) {\n  return function (...args: ArgumentTypes<T>): MethodReturnType<T> | undefined {\n    try {\n      return method(...args)\n    } catch (err) {\n      if (isUnresolvableError(err)) {\n        return undefined\n      }\n\n      throw err\n    }\n  }\n}\n","/**\n * @internal\n */\nexport const cdnUrl = 'https://cdn.sanity.io'\n\n/**\n * @internal\n */\nexport const fileAssetFilenamePattern = /^([a-zA-Z0-9_]{24,40}|[a-f0-9]{40})+\\.[a-z0-9]+$/\n\n/**\n * @internal\n */\nexport const fileAssetIdPattern = /^file-[a-zA-Z0-9_]+-[a-z0-9]+$/\n\n/**\n * @internal\n */\nexport const imageAssetFilenamePattern = /^([a-zA-Z0-9_]{24,40}|[a-f0-9]{40})-\\d+x\\d+\\.[a-z0-9]+$/\n\n/**\n * @internal\n */\nexport const imageAssetIdPattern = /^image-[a-zA-Z0-9_]+-\\d+x\\d+-[a-z0-9]+$/\n\n/**\n * @internal\n */\nexport const assetFilenamePattern = /^([a-zA-Z0-9_]+\\.[a-z0-9]+|[a-zA-Z0-9_]+-\\d+x\\d+\\.[a-z0-9]+)$/\n\n/**\n * @internal\n */\nexport const pathPattern = /^(images|files)\\/([a-z0-9]+)\\/([a-z0-9][-\\w]*)\\//\n\n/**\n * @internal\n */\nexport const idPattern = /^(?:image-[a-zA-Z0-9_]+-\\d+x\\d+-[a-z0-9]+|file-[a-zA-Z0-9_]+-[a-z0-9]+)$/\n\n/**\n * For use in cases where the project and dataset doesn't really matter\n *\n * @internal\n */\nexport const dummyProject = {projectId: 'a', dataset: 'b'}\n","import type {\n  SanityAssetIdStub,\n  SanityAssetObjectStub,\n  SanityAssetPathStub,\n  SanityAssetUrlStub,\n  SanityFileAsset,\n  SanityReference,\n} from './types'\n\n/**\n * Checks whether or not the given source is a Sanity reference\n * (an object containing _ref string key)\n *\n * @param ref - Possible reference\n * @returns Whether or not the passed object is a reference\n */\nexport function isReference(ref: unknown): ref is SanityReference {\n  return isObject(ref) && typeof (ref as SanityReference)._ref === 'string'\n}\n\n/**\n * Checks whether or not the given source is an asset ID stub\n * (an object containing an `_id` property)\n *\n * @param stub - Possible asset id stub\n * @returns Whether or not the passed object is an object id stub\n */\nexport function isAssetIdStub(stub: unknown): stub is SanityAssetIdStub {\n  return isObject(stub) && typeof (stub as SanityAssetIdStub)._id === 'string'\n}\n\n/**\n * Checks whether or not the given source is an asset path stub\n * (an object containing a `path` property)\n *\n * @param stub - Possible asset path stub\n * @returns Whether or not the passed object is an object path stub\n */\nexport function isAssetPathStub(stub: unknown): stub is SanityAssetPathStub {\n  return isObject(stub) && typeof (stub as SanityAssetPathStub).path === 'string'\n}\n\n/**\n * Checks whether or not the given source is an asset URL stub\n * (an object containing a `url` property)\n *\n * @param stub - Possible asset url stub\n * @returns Whether or not the passed object is an object url stub\n */\nexport function isAssetUrlStub(stub: unknown): stub is SanityAssetUrlStub {\n  return isObject(stub) && typeof (stub as SanityAssetUrlStub).url === 'string'\n}\n\n/**\n * Checks whether or not the given source is a (partial) sanity file asset document.\n * Only checks the `_type` property, all other properties _may_ be missing\n *\n * @param src - Source to check\n * @returns Whether or not the given source is a file asset\n */\nexport function isSanityFileAsset(src: unknown): src is SanityFileAsset {\n  return isObject(src) && (src as SanityFileAsset)._type === 'sanity.fileAsset'\n}\n\n/**\n * Checks whether or not the given source is an asset object stub\n *\n * @param stub - Possible asset object stub\n * @returns Whether or not the passed object is an object stub\n */\nexport function isAssetObjectStub(stub: unknown): stub is SanityAssetObjectStub {\n  const item = stub as SanityAssetObjectStub\n  return isObject(item) && item.asset && typeof item.asset === 'object'\n}\n\n/**\n * Checks whether or not the passed object is an object (and not `null`)\n *\n * @param obj Item to check whether or not is an object\n * @returns Whether or not `obj` is an object\n * @internal\n */\nexport function isObject(obj: unknown): obj is object {\n  return obj !== null && !Array.isArray(obj) && typeof obj === 'object'\n}\n","import type {\n  FileUrlBuilderOptions,\n  ImageUrlBuilderOptions,\n  SanityAssetSource,\n  SanityFileUrlParts,\n  SanityImageUrlParts,\n  SanityProjectDetails,\n} from './types'\nimport {pathPattern, fileAssetFilenamePattern, imageAssetFilenamePattern, cdnUrl} from './constants'\nimport {isAssetObjectStub, isAssetPathStub, isAssetUrlStub, isReference} from './asserters'\nimport {getForgivingResolver, UnresolvableError} from './utils'\n\n/**\n * Builds the base image path from the minimal set of parts required to assemble it\n *\n * @param asset - An asset-like shape defining ID, dimensions and extension\n * @param project - Project ID and dataset the image belongs to\n * @return string\n */\nexport function buildImagePath(\n  asset: ImageUrlBuilderOptions | SanityImageUrlParts,\n  project?: SanityProjectDetails\n): string {\n  const projectId = project?.projectId || asset.projectId\n  const dataset = project?.dataset || asset.dataset\n  if (!projectId || !dataset) {\n    throw new Error('Project details (projectId and dataset) required to resolve path for image')\n  }\n\n  const dimensions =\n    'metadata' in asset ? asset.metadata.dimensions : {width: asset.width, height: asset.height}\n  const originalFilename = 'originalFilename' in asset ? asset.originalFilename : undefined\n  const {assetId, extension, vanityFilename} = asset\n  const {width, height} = dimensions\n\n  let vanity = vanityFilename || originalFilename\n  vanity = vanity ? `/${vanity}` : ''\n\n  return `images/${projectId}/${dataset}/${assetId}-${width}x${height}.${extension}${vanity}`\n}\n\n/**\n * Builds the base image URL from the minimal set of parts required to assemble it\n *\n * @param asset - An asset-like shape defining ID, dimensions and extension\n * @param project - Project ID and dataset the image belongs to\n * @return string\n */\nexport function buildImageUrl(\n  asset: ImageUrlBuilderOptions | SanityImageUrlParts,\n  project?: SanityProjectDetails\n): string {\n  return `${cdnUrl}/${buildImagePath(asset, project)}`\n}\n\n/**\n * Builds the base file path from the minimal set of parts required to assemble it\n *\n * @param asset - An asset-like shape defining ID, dimensions and extension\n * @param project - Project ID and dataset the file belongs to\n * @return string\n */\nexport function buildFilePath(\n  asset: FileUrlBuilderOptions | SanityFileUrlParts,\n  project?: SanityProjectDetails\n): string {\n  const projectId = project?.projectId || asset.projectId\n  const dataset = project?.dataset || asset.dataset\n  if (!projectId || !dataset) {\n    throw new Error('Project details (projectId and dataset) required to resolve path for file')\n  }\n\n  const originalFilename = 'originalFilename' in asset ? asset.originalFilename : undefined\n  const {assetId, extension, vanityFilename} = asset\n\n  let vanity = vanityFilename || originalFilename\n  vanity = vanity ? `/${vanity}` : ''\n\n  return `files/${projectId}/${dataset}/${assetId}.${extension}${vanity}`\n}\n\n/**\n * Builds the base file URL from the minimal set of parts required to assemble it\n *\n * @param asset - An asset-like shape defining ID and extension\n * @param project - Project ID and dataset the file belongs to\n * @return string\n */\nexport function buildFileUrl(asset: FileUrlBuilderOptions, project?: SanityProjectDetails): string {\n  return `${cdnUrl}/${buildFilePath(asset, project)}`\n}\n\n/**\n * Checks whether or not the given URL contains an asset path\n *\n * @param url - URL or path name\n * @returns Whether or not it contained an asset path\n */\nfunction hasPath(urlOrPath: string): boolean {\n  return pathPattern.test(tryGetUrlPath(urlOrPath) || '')\n}\n\n/**\n * Tries to get the asset path from a given asset source\n *\n * @param src - The source image to infer an asset path from\n * @returns A path if resolvable, undefined otherwise\n */\nexport function tryGetAssetPath(src: SanityAssetSource): string | undefined {\n  if (isAssetObjectStub(src)) {\n    return tryGetAssetPath(src.asset)\n  }\n\n  if (isReference(src)) {\n    return undefined\n  }\n\n  if (typeof src === 'string') {\n    return hasPath(src) ? getUrlPath(src) : undefined\n  }\n\n  if (isAssetPathStub(src)) {\n    return src.path\n  }\n\n  if (isAssetUrlStub(src)) {\n    return getUrlPath(src.url)\n  }\n\n  return undefined\n}\n\n/**\n * Strips the CDN URL and query params from a URL, eg:\n * `https://cdn.sanity.io/images/project/dataset/filename-200x200.jpg?foo=bar` =>\n * `images/project/dataset/filename-200x200.jpg`\n *\n * @param url - URL to get path name from\n * @returns The path of a CDN URL\n * @throws If URL is not a valid Sanity asset URL\n */\nexport function getUrlPath(url: string): string {\n  if (pathPattern.test(url)) {\n    // Already just a path\n    return url\n  }\n\n  if (!url.startsWith(`${cdnUrl}/`)) {\n    throw new UnresolvableError(`Failed to resolve path from URL \"${url}\"`)\n  }\n\n  const qsPos = url.indexOf('?')\n  const toIndex = qsPos === -1 ? undefined : qsPos\n  return url.slice(cdnUrl.length + 1, toIndex)\n}\n\n/**\n * See {@link getUrlPath}\n *\n * @inheritFrom {@link getUrlPath}\n * @returns Returns `undefined` instead of throwing if a value cannot be resolved\n */\nexport const tryGetUrlPath = getForgivingResolver(getUrlPath)\n\n/**\n * Strips the CDN URL, path and query params from a URL, eg:\n * `https://cdn.sanity.io/images/project/dataset/filename-200x200.jpg?foo=bar` =>\n * `filename-200x200.jpg`\n *\n * @param url - URL to get filename from\n * @returns The filename of an URL, if URL matches the CDN URL\n * @throws If URL is not a valid Sanity asset URL\n */\nexport function getUrlFilename(url: string): string {\n  const path = tryGetUrlPath(url) || url\n  const filename = path.replace(/^(images|files)\\/[a-z0-9]+\\/[a-z0-9][-\\w]\\/*/, '')\n  if (!isValidFilename(filename)) {\n    throw new UnresolvableError(`Failed to resolve filename from URL \"${url}\"`)\n  }\n\n  return filename\n}\n\n/**\n * See {@link getUrlFilename}\n *\n * @inheritFrom {@link getUrlFilename}\n * @returns Returns `undefined` instead of throwing if a value cannot be resolved\n */\nexport const tryGetUrlFilename = getForgivingResolver(getUrlFilename)\n\n/**\n * Checks whether or not a given filename matches the expected Sanity asset filename pattern\n *\n * @param filename - Filename to check for validity\n * @returns Whether or not the specified filename is valid\n */\nexport function isValidFilename(filename: string): boolean {\n  return fileAssetFilenamePattern.test(filename) || imageAssetFilenamePattern.test(filename)\n}\n","import type {\n  SanityAssetIdParts,\n  SanityFileAssetIdParts,\n  SanityImageAssetIdParts,\n  SanityAssetUrlParts,\n  SanityFileUrlParts,\n  SanityImageUrlParts,\n} from './types'\nimport {\n  cdnUrl,\n  fileAssetIdPattern,\n  imageAssetFilenamePattern,\n  imageAssetIdPattern,\n  pathPattern,\n} from './constants'\nimport {tryGetUrlFilename, isValidFilename} from './paths'\n\n/**\n * @internal\n */\nconst exampleFileId = 'file-027401f31c3ac1e6d78c5d539ccd1beff72b9b11-pdf'\n\n/**\n * @internal\n */\nconst exampleImageId = 'image-027401f31c3ac1e6d78c5d539ccd1beff72b9b11-2000x3000-jpg'\n\n/**\n * Parses a Sanity asset document ID into individual parts (type, id, extension, width/height etc)\n *\n * @param documentId - Document ID to parse into named parts\n * @returns Object of named properties\n * @throws If document ID is invalid\n */\nexport function parseAssetId(documentId: string): SanityAssetIdParts {\n  if (imageAssetIdPattern.test(documentId)) {\n    return parseImageAssetId(documentId)\n  }\n\n  if (fileAssetIdPattern.test(documentId)) {\n    return parseFileAssetId(documentId)\n  }\n\n  throw new Error(`Invalid image/file asset ID: ${documentId}`)\n}\n\n/**\n * Parses a Sanity file asset document ID into individual parts (type, id, extension)\n *\n * @param documentId - File asset document ID to parse into named parts\n * @returns Object of named properties\n * @throws If document ID invalid\n */\nexport function parseFileAssetId(documentId: string): SanityFileAssetIdParts {\n  if (!fileAssetIdPattern.test(documentId)) {\n    throw new Error(\n      `Malformed file asset ID '${documentId}'. Expected an id like \"${exampleFileId}\"`\n    )\n  }\n\n  const [, assetId, extension] = documentId.split('-')\n  return {type: 'file', assetId, extension}\n}\n\n/**\n * Parses a Sanity image asset document ID into individual parts (type, id, extension, width, height)\n *\n * @param documentId - Image asset document ID to parse into named parts\n * @returns Object of named properties\n * @throws If document ID invalid\n */\nexport function parseImageAssetId(documentId: string): SanityImageAssetIdParts {\n  const [, assetId, dimensionString, extension] = documentId.split('-')\n  const [width, height] = (dimensionString || '').split('x').map(Number)\n\n  if (!assetId || !dimensionString || !extension || !(width > 0) || !(height > 0)) {\n    throw new Error(`Malformed asset ID '${documentId}'. Expected an id like \"${exampleImageId}\".`)\n  }\n\n  return {type: 'image', assetId, width, height, extension}\n}\n\n/**\n * Parses a Sanity asset filename into individual parts (type, id, extension, width, height)\n *\n * @param filename - Filename to parse into named parts\n * @returns Object of named properties\n * @throws If image/filename is invalid\n */\nexport function parseAssetFilename(filename: string): SanityAssetIdParts {\n  const file = tryGetUrlFilename(filename) || ''\n  if (!isValidFilename(file)) {\n    throw new Error(`Invalid image/file asset filename: ${filename}`)\n  }\n\n  try {\n    const type = imageAssetFilenamePattern.test(file) ? 'image' : 'file'\n    const assetId = file.replace(/\\.([a-z0-9+]+)$/i, '-$1')\n    return parseAssetId(`${type}-${assetId}`)\n  } catch (err) {\n    throw new Error(`Invalid image/file asset filename: ${filename}`)\n  }\n}\n\n/**\n * Parses a full Sanity asset URL into individual parts\n * (type, project ID, dataset, id, extension, width, height)\n *\n * @param url - Full URL to parse into named parts\n * @returns Object of named properties\n * @throws If URL is invalid or not a Sanity asset URL\n */\nexport function parseAssetUrl(url: string): SanityAssetUrlParts {\n  if (!url.startsWith(cdnUrl)) {\n    throw new Error(`URL is not a valid Sanity asset URL: ${url}`)\n  }\n\n  const path = url.slice(cdnUrl.length).replace(/^\\/+/, '')\n  const [projectPath, , projectId, dataset] = path.match(pathPattern) || []\n  if (!projectId || !dataset) {\n    throw new Error(`URL is not a valid Sanity asset URL: ${url}`)\n  }\n\n  const [filename, vanityFilename] = path.slice(projectPath.length).split('/')\n  const parsed = parseAssetFilename(filename)\n\n  return {\n    ...parsed,\n    projectId,\n    dataset,\n    vanityFilename,\n  }\n}\n\n/**\n * Parses a full Sanity image asset URL into individual parts\n * (type, project ID, dataset, id, extension, width, height)\n *\n * @param url - Full URL to parse into named parts\n * @returns Object of named properties\n * @throws If URL is invalid or not a Sanity image asset URL\n */\nexport function parseImageAssetUrl(url: string): SanityImageUrlParts {\n  const parsed = parseAssetUrl(url)\n  if (parsed.type !== 'image') {\n    throw new Error(`URL is not a valid Sanity image asset URL: ${url}`)\n  }\n\n  return parsed\n}\n\n/**\n * Parses a full Sanity file asset URL into individual parts\n * (type, project ID, dataset, id, extension, width, height)\n *\n * @param url - Full URL to parse into named parts\n * @returns Object of named properties\n * @throws If URL is invalid or not a Sanity file asset URL\n */\nexport function parseFileAssetUrl(url: string): SanityFileUrlParts {\n  const parsed = parseAssetUrl(url)\n  if (parsed.type !== 'file') {\n    throw new Error(`URL is not a valid Sanity file asset URL: ${url}`)\n  }\n\n  return parsed\n}\n\n/**\n * Validates that a given URL is a Sanity asset URL, and returns the asset type if valid.\n *\n * @param url URL to extract asset type from\n * @returns Asset type if valid URL, false otherwise\n * @internal\n */\nexport function getAssetUrlType(url: string): 'image' | 'file' | false {\n  try {\n    return parseAssetUrl(url).type\n  } catch (err) {\n    return false\n  }\n}\n","import type {\n  ResolvedSanityFile,\n  ResolvedSanityImage,\n  SanityAssetSource,\n  SanityFileAsset,\n  SanityFileObjectStub,\n  SanityFileSource,\n  SanityImageAsset,\n  SanityImageDimensions,\n  SanityImageObjectStub,\n  SanityImageSource,\n  SanityProjectDetails,\n} from './types'\nimport {getDefaultCrop, getDefaultHotspot} from './hotspotCrop'\nimport {getForgivingResolver, UnresolvableError} from './utils'\nimport {parseImageAssetId, parseFileAssetId} from './parse'\nimport {\n  isAssetIdStub,\n  isAssetObjectStub,\n  isAssetPathStub,\n  isAssetUrlStub,\n  isReference,\n} from './asserters'\nimport {\n  cdnUrl,\n  dummyProject,\n  fileAssetFilenamePattern,\n  idPattern,\n  imageAssetFilenamePattern,\n  pathPattern,\n} from './constants'\nimport {\n  buildFilePath,\n  buildFileUrl,\n  buildImagePath,\n  buildImageUrl,\n  getUrlPath,\n  tryGetAssetPath,\n} from './paths'\n\n/**\n * Returns the width, height and aspect ratio of a passed image asset, from any\n * inferrable structure (id, url, path, asset document, image object etc)\n *\n * @param src - Input source (image object, asset, reference, id, url, path)\n * @returns Object with width, height and aspect ratio properties\n *\n * @throws {@link UnresolvableError}\n * Throws if passed image source could not be resolved to an asset ID\n */\nexport function getImageDimensions(src: SanityImageSource): SanityImageDimensions {\n  const imageId = getAssetDocumentId(src)\n  const {width, height} = parseImageAssetId(imageId)\n  const aspectRatio = width / height\n  return {width, height, aspectRatio}\n}\n\n/**\n * See {@link getImageDimensions}\n *\n * @inheritFrom {@link getImageDimensions}\n * @returns Returns `undefined` instead of throwing if a value cannot be resolved\n */\nexport const tryGetImageDimensions = getForgivingResolver(getImageDimensions)\n\n/**\n * Returns the file extension for a given asset\n *\n * @param src - Input source (file/image object, asset, reference, id, url, path)\n * @returns The file extension, if resolvable (no `.` included)\n *\n * @throws {@link UnresolvableError}\n * Throws if passed asset source could not be resolved to an asset ID\n */\nexport function getExtension(src: SanityAssetSource): string {\n  return isFileSource(src)\n    ? getFile(src, dummyProject).asset.extension\n    : getImage(src, dummyProject).asset.extension\n}\n\n/**\n * See {@link getExtension}\n *\n * @inheritFrom {@link getExtension}\n * @returns Returns `undefined` instead of throwing if a value cannot be resolved\n */\nexport const tryGetExtension = getForgivingResolver(getExtension)\n\n/**\n * Tries to resolve an image object with as much information as possible,\n * from any inferrable structure (id, url, path, image object etc)\n *\n * @param src - Input source (image object, asset, reference, id, url, path)\n * @param project Project ID and dataset the image belongs to\n * @returns Image object\n *\n * @throws {@link UnresolvableError}\n * Throws if passed image source could not be resolved to an asset ID\n */\nexport function getImage(\n  src: SanityImageSource,\n  project?: SanityProjectDetails\n): ResolvedSanityImage {\n  const projectDetails = project || tryGetProject(src)\n  const asset = getImageAsset(src, projectDetails)\n\n  const img = src as SanityImageObjectStub\n  return {\n    asset,\n    crop: img.crop || getDefaultCrop(),\n    hotspot: img.hotspot || getDefaultHotspot(),\n  }\n}\n\n/**\n * See {@link getImage}\n *\n * @inheritFrom {@link getImage}\n * @returns Returns `undefined` instead of throwing if a value cannot be resolved\n */\nexport const tryGetImage = getForgivingResolver(getImage)\n\n/**\n * Tries to resolve a (partial) image asset document with as much information as possible,\n * from any inferrable structure (id, url, path, image object etc)\n *\n * @param src - Input source (image object, asset, reference, id, url, path)\n * @param project - Project ID and dataset the image belongs to\n * @returns Image asset document\n *\n * @throws {@link UnresolvableError}\n * Throws if passed image source could not be resolved to an asset ID\n */\nexport function getImageAsset(\n  src: SanityImageSource,\n  project?: SanityProjectDetails\n): SanityImageAsset {\n  const projectDetails = project || getProject(src)\n\n  const _id = getAssetDocumentId(src)\n  const sourceObj = src as SanityImageObjectStub\n  const source = (sourceObj.asset || src) as SanityImageAsset\n  const metadata = source.metadata || {}\n  const {assetId, width, height, extension} = parseImageAssetId(_id)\n  const aspectRatio = width / height\n  const baseAsset: SanityImageAsset = {\n    _id,\n    _type: 'sanity.imageAsset',\n    assetId,\n    extension,\n    metadata: {\n      ...metadata,\n      dimensions: {width, height, aspectRatio},\n    },\n\n    // Placeholders, overwritten below\n    url: '',\n    path: '',\n  }\n\n  return {\n    ...baseAsset,\n    path: buildImagePath(baseAsset, projectDetails),\n    url: buildImageUrl(baseAsset, projectDetails),\n  }\n}\n\n/**\n * See {@link getImageAsset}\n *\n * @inheritFrom {@link getImageAsset}\n * @returns Returns `undefined` instead of throwing if a value cannot be resolved\n */\nexport const tryGetImageAsset = getForgivingResolver(getImageAsset)\n\n/**\n * Tries to resolve an file object with as much information as possible,\n * from any inferrable structure (id, url, path, file object etc)\n *\n * @param src - Input source (file object, asset, reference, id, url, path)\n * @param project Project ID and dataset the file belongs to\n * @returns File object\n *\n * @throws {@link UnresolvableError}\n * Throws if passed file source could not be resolved to an asset ID\n */\nexport function getFile(src: SanityFileSource, project?: SanityProjectDetails): ResolvedSanityFile {\n  const projectDetails = project || tryGetProject(src)\n  const asset = getFileAsset(src, projectDetails)\n  return {asset}\n}\n\n/**\n * See {@link getFile}\n *\n * @inheritFrom {@link getFile}\n * @returns Returns `undefined` instead of throwing if a value cannot be resolved\n */\nexport const tryGetFile = getForgivingResolver(getFile)\n\n/**\n * Tries to resolve a (partial) file asset document with as much information as possible,\n * from any inferrable structure (id, url, path, file object etc)\n *\n * @param src - Input source (file object, asset, reference, id, url, path)\n * @param project - Project ID and dataset the file belongs to\n * @returns File asset document\n *\n * @throws {@link UnresolvableError}\n * Throws if passed file source could not be resolved to an asset ID\n */\nexport function getFileAsset(\n  src: SanityFileSource,\n  project?: SanityProjectDetails\n): SanityFileAsset {\n  const projectDetails = project || getProject(src)\n\n  const _id = getAssetDocumentId(src)\n  const sourceObj = src as SanityFileObjectStub\n  const source = (sourceObj.asset || src) as SanityFileAsset\n  const {assetId, extension} = parseFileAssetId(_id)\n  const baseAsset: SanityFileAsset = {\n    _id,\n    _type: 'sanity.fileAsset',\n    assetId,\n    extension,\n    metadata: source.metadata || {},\n\n    // Placeholders, overwritten below\n    url: '',\n    path: '',\n  }\n\n  return {\n    ...baseAsset,\n    path: buildFilePath(baseAsset, projectDetails),\n    url: buildFileUrl(baseAsset, projectDetails),\n  }\n}\n\n/**\n * See {@link getFileAsset}\n *\n * @inheritFrom {@link getFileAsset}\n * @returns Returns `undefined` instead of throwing if a value cannot be resolved\n */\nexport const tryGetFileAsset = getForgivingResolver(getFileAsset)\n\n/**\n * Tries to resolve the asset document ID from any inferrable structure\n *\n * @param src - Input source (image/file object, asset, reference, id, url, path)\n * @returns The asset document ID\n *\n * @throws {@link UnresolvableError}\n * Throws if passed asset source could not be resolved to an asset document ID\n */\nexport function getAssetDocumentId(src: SanityAssetSource): string {\n  const source = isAssetObjectStub(src) ? src.asset : src\n\n  let id = ''\n  if (typeof source === 'string') {\n    id = getIdFromString(source)\n  } else if (isReference(source)) {\n    id = source._ref\n  } else if (isAssetIdStub(source)) {\n    id = source._id\n  } else if (isAssetPathStub(source)) {\n    id = idFromUrl(`${cdnUrl}/${source.path}`)\n  } else if (isAssetUrlStub(source)) {\n    id = idFromUrl(source.url)\n  }\n\n  const hasId = id && idPattern.test(id)\n  if (!hasId) {\n    throw new UnresolvableError(src)\n  }\n\n  return id\n}\n\n/**\n * See {@link getAssetDocumentId}\n *\n * @inheritFrom {@link getAssetDocumentId}\n * @returns Returns `undefined` instead of throwing if a value cannot be resolved\n */\nexport const tryGetAssetDocumentId = getForgivingResolver(getAssetDocumentId)\n\n/**\n * Tries to cooerce a string (ID, URL or path) to an image asset ID\n *\n * @param str - Input string (ID, URL or path)\n * @returns string\n *\n *\n * @throws {@link UnresolvableError}\n * Throws if passed image source could not be resolved to an asset ID\n */\nexport function getIdFromString(str: string): string {\n  if (idPattern.test(str)) {\n    // Already an ID\n    return str\n  }\n\n  if (str.indexOf(`${cdnUrl}/images`) === 0 || str.indexOf(`${cdnUrl}/files`) === 0) {\n    // Full URL\n    return idFromUrl(str)\n  }\n\n  if (pathPattern.test(str)) {\n    // Path\n    return idFromUrl(`${cdnUrl}/${str}`)\n  }\n\n  if (isFileAssetFilename(str)) {\n    // Just a filename (projectId/dataset irrelevant: just need asset ID)\n    return idFromUrl(`${cdnUrl}/files/a/b/${str}`)\n  }\n\n  if (isImageAssetFilename(str)) {\n    // Just a filename (projectId/dataset irrelevant: just need asset ID)\n    return idFromUrl(`${cdnUrl}/images/a/b/${str}`)\n  }\n\n  throw new UnresolvableError(str)\n}\n\n/**\n * See {@link getIdFromString}\n *\n * @inheritFrom {@link getIdFromString}\n * @returns Returns `undefined` instead of throwing if a value cannot be resolved\n */\nexport const tryGetIdFromString = getForgivingResolver(getIdFromString)\n\n/**\n * Converts from a full asset URL to just the asset document ID\n *\n * @param url - A full asset URL to convert\n * @returns string\n */\nfunction idFromUrl(url: string): string {\n  const path = getUrlPath(url)\n  const [type, , , fileName] = path.split('/')\n  const prefix = type.replace(/s$/, '')\n  return `${prefix}-${fileName.replace(/\\./g, '-')}`\n}\n\n/**\n * Resolves project ID and dataset the image belongs to, based on full URL or path\n * @param source - Image URL or path\n * @returns object | undefined\n *\n * @throws {@link UnresolvableError}\n * Throws if passed image source could not be resolved to an asset ID\n */\nexport function getProject(src: SanityImageSource): SanityProjectDetails {\n  const path = tryGetAssetPath(src)\n  if (!path) {\n    throw new UnresolvableError(src, 'Failed to resolve project ID and dataset from source')\n  }\n\n  const [, , projectId, dataset] = path.match(pathPattern) || []\n  if (!projectId || !dataset) {\n    throw new UnresolvableError(src, 'Failed to resolve project ID and dataset from source')\n  }\n\n  return {projectId, dataset}\n}\n\n/**\n * See {@link getProject}\n *\n * @inheritFrom {@link getProject}\n * @returns Returns `undefined` instead of throwing if a value cannot be resolved\n */\nexport const tryGetProject = getForgivingResolver(getProject)\n\n/**\n * Returns whether or not the passed filename is a valid image asset filename\n *\n * @param filename - Filename to validate\n * @returns Whether or not the filename is an image asset filename\n */\nexport function isImageAssetFilename(filename: string): boolean {\n  return imageAssetFilenamePattern.test(filename)\n}\n\n/**\n * Returns whether or not the passed filename is a valid file asset filename\n *\n * @param filename - Filename to validate\n * @returns Whether or not the filename is a file asset filename\n */\nexport function isFileAssetFilename(filename: string): boolean {\n  return fileAssetFilenamePattern.test(filename)\n}\n\n/**\n * Returns whether or not the passed filename is a valid file or image asset filename\n *\n * @param filename - Filename to validate\n * @returns Whether or not the filename is an asset filename\n */\nexport function isAssetFilename(filename: string): boolean {\n  return isImageAssetFilename(filename) || isFileAssetFilename(filename)\n}\n\n/**\n * Return whether or not the passed source is a file source\n *\n * @param src - Source to check\n * @returns Whether or not the given source is a file source\n */\nexport function isFileSource(src: SanityAssetSource): src is SanityFileSource {\n  const assetId = getAssetDocumentId(src)\n  return assetId.startsWith('file-')\n}\n\n/**\n * Return whether or not the passed source is an image source\n *\n * @param src - Source to check\n * @returns Whether or not the given source is an image source\n */\nexport function isImageSource(src: SanityAssetSource): src is SanityImageSource {\n  const assetId = getAssetDocumentId(src)\n  return assetId.startsWith('image-')\n}\n","import {getAssetUrlType} from './parse'\n\n/**\n * Checks whether or not a given URL is a valid Sanity asset URL\n *\n * @param url URL to test\n * @returns True if url is a valid Sanity asset URL, false otherwise\n */\nexport function isSanityAssetUrl(url: string): boolean {\n  return getAssetUrlType(url) !== false\n}\n\n/**\n * Checks whether or not a given URL is a valid Sanity image asset URL\n *\n * @param url URL to test\n * @returns True if url is a valid Sanity image asset URL, false otherwise\n */\nexport function isSanityImageUrl(url: string): boolean {\n  return getAssetUrlType(url) === 'image'\n}\n\n/**\n * Checks whether or not a given URL is a valid Sanity file asset URL\n *\n * @param url URL to test\n * @returns True if url is a valid Sanity file asset URL, false otherwise\n */\nexport function isSanityFileUrl(url: string): boolean {\n  return getAssetUrlType(url) === 'file'\n}\n"],"names":["DEFAULT_CROP","Object","freeze","left","top","bottom","right","DEFAULT_HOTSPOT","x","y","height","width","getDefaultCrop","getDefaultHotspot","isDefaultCrop","crop","defaultTop","defaultBottom","defaultLeft","defaultRight","isDefaultHotspot","hotspot","defaultX","defaultY","defaultWidth","defaultHeight","UnresolvableError","inputSource","message","input","Error","isUnresolvableError","err","error","Boolean","unresolvable","getForgivingResolver","method","undefined","cdnUrl","fileAssetFilenamePattern","fileAssetIdPattern","imageAssetFilenamePattern","imageAssetIdPattern","pathPattern","idPattern","dummyProject","projectId","dataset","isReference","ref","isObject","_ref","isAssetIdStub","stub","_id","isAssetPathStub","path","isAssetUrlStub","url","isSanityFileAsset","src","_type","isAssetObjectStub","item","asset","obj","Array","isArray","buildImagePath","project","dimensions","metadata","originalFilename","assetId","extension","vanityFilename","vanity","buildImageUrl","buildFilePath","buildFileUrl","hasPath","urlOrPath","test","tryGetUrlPath","tryGetAssetPath","getUrlPath","startsWith","qsPos","indexOf","toIndex","slice","length","getUrlFilename","filename","replace","isValidFilename","tryGetUrlFilename","exampleFileId","exampleImageId","parseAssetId","documentId","parseImageAssetId","parseFileAssetId","split","type","dimensionString","map","Number","parseAssetFilename","file","parseAssetUrl","match","projectPath","parsed","parseImageAssetUrl","parseFileAssetUrl","getAssetUrlType","getImageDimensions","imageId","getAssetDocumentId","aspectRatio","tryGetImageDimensions","getExtension","isFileSource","getFile","getImage","tryGetExtension","projectDetails","tryGetProject","getImageAsset","img","tryGetImage","getProject","sourceObj","source","baseAsset","tryGetImageAsset","getFileAsset","tryGetFile","tryGetFileAsset","id","getIdFromString","idFromUrl","hasId","tryGetAssetDocumentId","str","isFileAssetFilename","isImageAssetFilename","tryGetIdFromString","fileName","prefix","isAssetFilename","isImageSource","isSanityAssetUrl","isSanityImageUrl","isSanityFileUrl"],"mappings":"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"}